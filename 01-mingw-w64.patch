--- xproto-7.0.23/Xfuncproto.h.in
+++ xproto-7.0.23/Xfuncproto.h.in
@@ -83,7 +83,7 @@ in this Software without prior written authorization from The Open Group.
 #endif /* GNUC >= 4 */
 
 /* Added in X11R6.9, so available in any version of modular xproto */
-#if defined(__GNUC__) && (__GNUC__ >= 4) && !defined(__CYGWIN__)
+#if defined(__GNUC__) && (__GNUC__ >= 4) && !defined(__CYGWIN__) && !defined(__MINGW32__)
 # define _X_EXPORT      __attribute__((visibility("default")))
 # define _X_HIDDEN      __attribute__((visibility("hidden")))
 # define _X_INTERNAL    __attribute__((visibility("internal")))
--- xproto-7.0.23/Xwindows.h
+++ xproto-7.0.23/Xwindows.h
@@ -29,28 +29,39 @@ The Open Group.
 /*
  * This header file has the sole purpose of allowing the inclusion of
  * windows.h without getting any name conflicts with X headers code, by
- * renaming the conflicting definitions from windows.h
- *
- * Some (non-Microsoft) versions of the Windows API headers actually avoid
+ * renaming or disabling the conflicting definitions from windows.h
+ */
+
+/*
+ * Mingw.org versions of the Windows API headers actually avoid
  * making the conflicting definitions if XFree86Server is defined, so we
  * need to remember if that was defined and undefine it during including
  * windows.h (so the conflicting definitions get wrapped correctly), and
- * then redefine it afterwards...
- *
- * There doesn't seem to be a good way to wrap the min/max macros from
- * windows.h, so we simply avoid defining them completely, allowing any
- * pre-existing definition to stand.
- *
+ * then redefine it afterwards. (This was never the correct thing to
+ * do as it's no help at all to X11 clients which also need to use the
+ * Win32 API)
  */
-
 #undef _XFree86Server
 #ifdef XFree86Server
 # define _XFree86Server
 # undef XFree86Server
 #endif
 
+/*
+ * There doesn't seem to be a good way to wrap the min/max macros from
+ * windows.h, so we simply avoid defining them completely, allowing any
+ * pre-existing definition to stand.
+ *
+ */
 #define NOMINMAX
-#define BOOL wBOOL
+
+/*
+ * mingw-w64 headers define BOOL as a typedef, protecting against macros
+ * mingw.org headers define BOOL in terms of WINBOOL
+ * ... so try to come up with something which works with both :-)
+ */
+#define _NO_BOOL_TYPEDEF
+#define BOOL WINBOOL
 #define INT32 wINT32
 #undef Status
 #define Status wStatus
@@ -68,6 +79,12 @@ The Open Group.
 #undef FreeResource
 #undef CreateWindowA
 
+/*
+ * Older version of this header used to name the windows API bool type wBOOL,
+ * rather than more standard name WINBOOL
+ */
+#define wBOOL WINBOOL
+
 #ifdef RESOURCE_H
 # undef RT_FONT
 # undef RT_CURSOR
--- xproto-7.0.23/Xwinsock.h
+++ xproto-7.0.23/Xwinsock.h
@@ -39,7 +39,13 @@ The Open Group.
 # undef XFree86Server
 #endif
 
-#define BOOL wBOOL
+/*
+ * mingw-w64 headers define BOOL as a typedef, protecting against macros
+ * mingw.org headers define BOOL in terms of WINBOOL
+ * ... so try to come up with something which works with both :-)
+ */
+#define _NO_BOOL_TYPEDEF
+#define BOOL WINBOOL
 #define INT32 wINT32
 #undef Status
 #define Status wStatus
@@ -58,6 +64,12 @@ The Open Group.
 #undef RT_FONT
 #undef RT_CURSOR
 
+/*
+ * Older version of this header used to name the windows API bool type wBOOL,
+ * rather than more standard name WINBOOL
+ */
+#define wBOOL WINBOOL
+
 #ifdef _XFree86Server
 # define XFree86Server
 # undef _XFree86Server
